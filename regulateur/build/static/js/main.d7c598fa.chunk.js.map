{"version":3,"sources":["../node_modules/jspdf/dist sync","components/prostForms.js","actions/postActions.js","actions/type.js","components/Allpost.js","components/prosts.js","reducers/postReducers.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","PostForms","state","NEwdata","dateDebut","Date","dateFin","spinner","handleDateChange","date","setState","nextProps","data","this","Card","className","variant","style","marginTop","width","Paper","CardHeader","avatar","Avatar","aria-label","backgroundColor","title","CardContent","Grid","container","spacing","item","xs","TextField","textAlign","label","value","onChange","target","utils","DateFnsUtils","justify","disableToolbar","format","margin","KeyboardButtonProps","Button","disabled","color","marginLeft","size","onClick","props","getUser","css","loading","React","Component","protoType","PropTypes","func","isRequired","array","connect","items","rib","dispatch","console","log","fetch","method","headers","then","response","status","json","type","payload","user","catch","error","AllPosts","newPost","push","history","map","tableIcons","Add","forwardRef","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","Posts","showData","operations","T1","index","natureOp","idOp","montant","moment","Math","round","dateOp","parseInt","fetchPost","undefined","dataTable","paddingLeft","Typography","gutterBottom","Box","fontSize","m","fontStyle","fontFamily","fontWeight","lastname","firstname","Address","NuIdNat","icons","columns","field","localization","body","emptyDataSourceMessage","options","cellStyle","headerStyle","wallet","newData","initialState","combineReducers","action","localStorage","getItem","setItem","JSON","stringify","parse","middleware","thunk","store","createStore","roorReducer","compose","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d7c598fa.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 347;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { createPost, getUser } from \"../actions/postActions\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { CardHeader } from \"@material-ui/core\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport \"date-fns\";\nimport { css } from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\n//  {/* <input\n//         onChange={(e) => {\n//           this.setState({ NEwdata: e.target.value });\n//         }}\n//       />\n//       <button\n//         onClick={() => {\n//           console.log(this.props.data);\n//           this.props.createPost(this.state.NEwdata, this.props.data);\n//         }}\n//       >\n//         aaaaaa\n//       </button> */}\n\nclass PostForms extends React.Component {\n  state = {\n    NEwdata: \"\",\n    dateDebut: new Date(),\n    dateFin: new Date(),\n    spinner: false,\n  };\n\n  handleDateChange = (date) => {\n    this.setState({ date });\n  };\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.data) {\n      // this.props.data.push(nextProps.newPost);\n\n      this.setState({ spinner: false });\n    }\n  }\n\n  render() {\n    const { NEwdata, dateDebut, dateFin, spinner } = this.state;\n    return (\n      <Card\n        className=\"root\"\n        variant=\"outlined\"\n        style={{ marginTop: \"2%\", width: \"80%\" }}\n      >\n        <Paper>\n          <CardHeader\n            avatar={\n              <Avatar aria-label=\"recipe\" style={{ backgroundColor: \"green\" }}>\n                R\n              </Avatar>\n            }\n            title={<h3>Régulateur</h3>}\n\n            // subheader=\"September 14, 2016\"\n          />\n          <CardContent>\n            <Grid container spacing={3}>\n              <Grid item xs={3}>\n                <TextField\n                  style={{\n                    textAlign: \"center\",\n                    width: \"100%\",\n                    marginTop: \"10px\",\n                  }}\n                  id=\"filled-basic\"\n                  label=\"Numéro de compte à la caisse\"\n                  variant=\"filled\"\n                  value={NEwdata}\n                  onChange={(value) =>\n                    this.setState({ NEwdata: value.target.value })\n                  }\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid container justify=\"space-around\">\n                    <KeyboardDatePicker\n                      disableToolbar\n                      variant=\"inline\"\n                      format=\"MM/dd/yyyy\"\n                      margin=\"normal\"\n                      id=\"dateFin\"\n                      label=\"Date debut\"\n                      value={dateDebut}\n                      onChange={(date) => this.setState({ dateDebut: date })}\n                      KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                      }}\n                    />\n                  </Grid>\n                </MuiPickersUtilsProvider>\n              </Grid>\n              <Grid item xs={3}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid container justify=\"space-around\">\n                    <KeyboardDatePicker\n                      disableToolbar\n                      variant=\"inline\"\n                      format=\"MM/dd/yyyy\"\n                      margin=\"normal\"\n                      id=\"dateDebut\"\n                      label=\"Date fin\"\n                      value={dateFin}\n                      onChange={(date) => this.setState({ dateFin: date })}\n                      KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                      }}\n                    />\n                  </Grid>\n                </MuiPickersUtilsProvider>\n              </Grid>\n              <Grid item xs={3}>\n                <Button\n                  disabled={spinner}\n                  style={{\n                    // float: \"right\",\n                    backgroundColor: \"green\",\n                    color: \"white\",\n                    marginTop: \"15px\",\n                    marginLeft: \"30px\",\n                  }}\n                  variant=\"contained\"\n                  // color=\"green\"\n                  size=\"large\"\n                  onClick={() => {\n                    this.setState({ spinner: !spinner });\n                    this.props.getUser(NEwdata, dateDebut, dateFin);\n                  }}\n                >\n                  <ClipLoader\n                    css={css}\n                    size={20}\n                    color={\"white\"}\n                    loading={spinner}\n                  />\n                  Rechercher\n                </Button>\n              </Grid>\n            </Grid>\n          </CardContent>\n          {/* <CardActions className='button'>\n          \n          </CardActions> */}\n        </Paper>\n      </Card>\n    );\n  }\n}\n\nPostForms.protoType = {\n  getUser: PropTypes.func.isRequired,\n  data: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  data: state.data.items,\n  // newPost: state.data.item,\n});\n\nexport default connect(mapStateToProps, { getUser })(PostForms);\n","import { FETCH_POSTS, NEW_POSTS, GET_USER } from \"./type\";\n\nexport const fetchPost = (user, dateDebut, dateFin) => (dispatch) => {\n  console.log(\"fetchinh\");\n  fetch(\n    `http://3.236.254.79:3000/getAllHistoriqueAdherent?wallet=${user.wallet}&dateDebut=${dateDebut}&dateFin=${dateFin}`,\n    {\n      method: \"get\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n      },\n      // body: qs.stringify(data)\n    }\n  )\n    .then((response) => (response.status === 200 ? response.json() : response))\n    .then((data) => {\n      console.log(\"data\", user.wallet);\n      //  console.log(data.cashouts);\n      console.log(data);\n      // const table = [...data.cashouts, data.cashin, data.echeance];\n      var newData = data;\n      newData.user = user;\n      dispatch({\n        type: FETCH_POSTS,\n        payload: newData,\n      });\n    })\n    .catch((error) => {\n      console.log(`Pret${error}`);\n    });\n};\n\nexport const getUser = (rib, dateDebut, dateFin) => (dispatch) => {\n  console.log(\"fetchinh\");\n  fetch(`http://3.236.254.79:3001/getAdherentbyrib?rib=${rib}`, {\n    method: \"get\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n    },\n    // body: qs.stringify(data)\n  })\n    .then((response) => (response.status === 200 ? response.json() : response))\n    .then((data) => {\n      console.log(\"data\");\n      //  console.log(data.cashouts);\n      dispatch({\n        type: GET_USER,\n        payload: { user: data.user, dateDebut, dateFin },\n      });\n    })\n    .catch((error) => {\n      console.log(`Pret${error}`);\n    });\n};\n\nexport const createPost = (postData, allData) => (dispatch) => {\n  console.log(\"aaa\", allData);\n  dispatch({\n    type: NEW_POSTS,\n    payload: postData,\n    //  payload2: allData.push(postData),\n  });\n};\n","export const FETCH_POSTS = 'FETCH_POSTS'\nexport const NEW_POSTS = 'NEW_POSTS'\nexport const GET_USER = 'GET_USER'\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nclass AllPosts extends React.Component {\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.newPost) {\n      this.props.data.push(nextProps.newPost);\n    }\n  }\n  render() {\n    console.log(this.props.data);\n    const history = this.props.data.map((item) => (\n      <div>\n        <p3>C</p3>\n      </div>\n    ));\n    return <div >{history}</div>;\n  }\n}\n\nAllPosts.propTypes = {\n  data: PropTypes.array.isRequired,\n  newPost: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  data: state.data.items,\n  newPost: state.data.item,\n});\n\nexport default connect(mapStateToProps, {})(AllPosts);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { forwardRef } from \"react\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport MaterialTable from \"material-table\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport * as moment from \"moment\";\nimport \"../App.css\";\nimport { fetchPost } from \"../actions/postActions\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nclass Posts extends React.Component {\n  componentWillMount() {\n    // this.props.fetchPost();\n  }\n  componentWillReceiveProps(nextProps) {\n    console.log(nextProps.user);\n    if (nextProps.user && parseInt(nextProps.user.rib, 10) !== 0) {\n      // this.props.data.push(nextProps.newPost);\n\n      this.props.fetchPost(\n        nextProps.user,\n        nextProps.dateDebut,\n        nextProps.dateFin\n      );\n    }\n  }\n\n  showData = (operations) => {\n    const T1 = operations.map((item, index) => {\n      switch (item.type) {\n        case 0:\n          return {\n            natureOp: \"cash-in agent\",\n            idOp: item.idOp,\n            montant: item.montant,\n            date: moment\n              .unix(Math.round(item.dateOp / 1000))\n              .format(\"DD/MM/YYYY HH:mm\"),\n          };\n        case 1:\n          return {\n            natureOp: \"cash-in adherent\",\n            idOp: item.idOp,\n            montant: item.montant,\n            date: moment\n              .unix(Math.round(item.dateOp / 1000))\n              .format(\"DD/MM/YYYY HH:mm\"),\n          };\n        case 2:\n          return {\n            natureOp: \"transfert\",\n            idOp: item.idOp,\n            montant: item.montant,\n            date: moment\n              .unix(Math.round(item.dateOp / 1000))\n              .format(\"DD/MM/YYYY HH:mm\"),\n          };\n        case 3:\n          return {\n            natureOp: \"cash-out\",\n            idOp: item.idOp,\n            montant: item.montant,\n            date: moment\n              .unix(Math.round(item.dateOp / 1000))\n              .format(\"DD/MM/YYYY HH:mm\"),\n          };\n        default:\n          return {\n            natureOp: \"échéance\",\n            idOp: item.idOp,\n            montant: item.montant,\n            date: moment\n              .unix(Math.round(item.dateOp))\n              .format(\"DD/MM/YYYY HH:mm\"),\n          };\n      }\n    });\n    return [...T1];\n  };\n\n  render() {\n    var operations = [];\n\n    const { data } = this.props;\n    if (data.operations !== undefined) {\n      operations = data.operations;\n\n      //  user = data.user;\n    }\n\n    const dataTable = this.showData(operations);\n    return (\n      <div className=\"proof\">\n        <Card className=\"root2\" variant=\"outlined\">\n          <CardContent>\n            {data.user !== undefined && (\n              <Grid container spacing={3}>\n                <Grid item xs={6}>\n                  <Paper style={{ paddingLeft: \"30px\", marginTop: \"20px\" }}>\n                    <Typography variant=\"subtitle1\" gutterBottom>\n                      <Box\n                        fontSize={18}\n                        m={1}\n                        fontStyle=\"oblique\"\n                        fontFamily=\"Segoe UI Emoji\"\n                        fontWeight=\"fontWeightLight\"\n                      >\n                        Prenom : {data.user.lastname}\n                      </Box>\n                    </Typography>\n                    <Typography variant=\"subtitle1\" gutterBottom>\n                      <Box\n                        fontSize={18}\n                        m={1}\n                        fontStyle=\"oblique\"\n                        fontFamily=\"Segoe UI Emoji\"\n                        fontWeight=\"fontWeightLight\"\n                      >\n                        Nom : {data.user.firstname}\n                      </Box>\n                    </Typography>\n                  </Paper>\n                </Grid>\n                <Grid item xs={6}>\n                  <Paper style={{ paddingLeft: \"30px\", marginTop: \"20px\" }}>\n                    <Typography variant=\"subtitle1\" gutterBottom>\n                      <Box\n                        fontSize={18}\n                        m={1}\n                        fontStyle=\"oblique\"\n                        fontFamily=\"Segoe UI Emoji\"\n                        fontWeight=\"fontWeightLight\"\n                      >\n                        addresse : {data.user.Address}\n                      </Box>\n                    </Typography>\n\n                    <Typography style={{ fontSize: \"30\" }} gutterBottom>\n                      <Box\n                        fontSize={18}\n                        m={1}\n                        fontStyle=\"oblique\"\n                        fontFamily=\"Segoe UI Emoji\"\n                        fontWeight=\"fontWeightLight\"\n                      >\n                        CIN : {data.user.NuIdNat}\n                      </Box>\n                    </Typography>\n                  </Paper>\n                </Grid>\n              </Grid>\n            )}{\" \"}\n            <div style={{ marginTop: \"2%\" }}>\n              <MaterialTable\n                icons={tableIcons}\n                title=\"Opérations exécutées\"\n                columns={[\n                  { title: \"Nature d'opération\", field: \"natureOp\" },\n                  { title: \"Identifiant de l'opération\", field: \"idOp\" },\n                  {\n                    title: \"Montant\",\n                    field: \"montant\",\n                    type: \"numeric\",\n                  },\n                  {\n                    title: \"Date de finalisation\",\n                    field: \"date\",\n                    type: \"numeric\",\n                    //lookup: { 34: \"İstanbul\", 63: \"Şanlıurfa\" },\n                  },\n                ]}\n                data={dataTable}\n                localization={{\n                  body: {\n                    emptyDataSourceMessage: \"aucune recherche à afficher\",\n                  },\n                }}\n                options={{\n                  cellStyle: {\n                    textAlign: \"center\",\n                  },\n                  headerStyle: {\n                    textAlign: \"center\",\n                  },\n                }}\n              />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n}\n\nPosts.propTypes = {\n  fetchPost: PropTypes.func.isRequired,\n  data: PropTypes.array.isRequired,\n  user: PropTypes.object.isRequired,\n  dateDebut: PropTypes.instanceOf(Date).isRequired,\n  dateFin: PropTypes.instanceOf(Date).isRequired,\n  newPost: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  data: state.data.items,\n  newPost: state.data.item,\n  user: state.data.user,\n  dateDebut: state.data.dateDebut,\n  dateFin: state.data.dateFin,\n});\n\nexport default connect(mapStateToProps, { fetchPost })(Posts);\n","import { act } from \"react-dom/test-utils\";\nimport { FETCH_POSTS, NEW_POSTS, GET_USER } from \"../actions/type\";\n\nconst initialState = {\n  items: [],\n  item: {},\n  user: {},\n  dateDebut: new Date(),\n  dateFin: new Date(),\n};\n\nexport default function (state = initialState, action) {\n  // const a = [...state.items];\n  // console.log(\"reducers\", a.push(action.payload));\n  // var items = JSON.parse(localStorage.getItem(\"transactions\"));\n\n  switch (action.type) {\n    case FETCH_POSTS: {\n      //  localStorage.setItem(\"transactions\", JSON.stringify(action.payload));\n      return {\n        ...state,\n        items: action.payload,\n        user: { rib: 0 },\n      };\n    }\n    case NEW_POSTS: {\n      // items.push(action.payload);\n      // localStorage.setItem(\"transactions\", JSON.stringify(items));\n\n      //   state.items = state.items.push(action.payload);\n      return {\n        ...state,\n        // item: action.payload,\n        items: [...state.items, action.payload],\n        //  items: state.items.push({ a: action.payload }),\n      };\n    }\n    case GET_USER: {\n      // items.push(action.payload);\n      // localStorage.setItem(\"transactions\", JSON.stringify(items));\n\n      //   state.items = state.items.push(action.payload);\n      return {\n        ...state,\n        // item: action.payload,\n        user: action.payload.user,\n        dateDebut: action.payload.dateDebut,\n        dateFin: action.payload.dateFin,\n        //  items: state.items.push({ a: action.payload }),\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\n\nimport postReducer from \"./postReducers\";\n\nexport default combineReducers({\n  data: postReducer,\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport roorReducer from \"./reducers\";\n\nif (localStorage.getItem(\"transactions\") == null)\n  localStorage.setItem(\"transactions\", JSON.stringify([]));\nconst initialState = {\n  item: {},\n  items: JSON.parse(localStorage.getItem(\"transactions\")),\n};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  roorReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware)\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n","import React from \"react\";\nimport ProstForms from \"./components/prostForms\";\nimport AllPosts from \"./components/Allpost\";\nimport Prosts from \"./components/prosts\";\nimport store from \"./store\";\nimport \"./App.css\";\n\nimport { Provider } from \"react-redux\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// const store = createStore(() => [], {}, applyMiddleware());\n\nclass App extends React.Component {\n  render() {\n    return (\n      // <Provider store={store}>\n      //   <div className=\"App\">\n      //     <ProstForms />\n      //     <Prosts />\n      //   </div>\n      // </Provider>\n      <Provider store={store}>\n        <Router className=\"App\">\n      \n            {/* <nav>\n              <ul>\n                <li>\n                  <Link to=\"/\">Prosts</Link>\n                </li>\n                <li>\n                  <Link to=\"/ProstForms\">ProstForms</Link>\n                </li>\n                <li>\n                  <Link to=\"/AllPosts\">AllPosts</Link>\n                </li>\n              </ul>\n            </nav> */}\n\n            {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n            {/* <Switch>\n            <Route path=\"/AllPosts\">\n                <AllPosts />\n              </Route>\n              <Route path=\"/ProstForms\">\n                <ProstForms />\n              </Route>\n              <Route path=\"/\">\n                <Prosts />\n              </Route>\n            </Switch> */}\n              <ProstForms />\n          <Prosts />\n        </Router> \n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}